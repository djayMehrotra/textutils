{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutTextUtils","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","rows","value","onChange","event","console","log","target","style","backgroundColor","color","disabled","length","newText","toUpperCase","showAlert","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","About","myStyle","Alert","height","alert","role","word","lower","toLowerCase","charAt","slice","capitalize","msg","defaultProps","createBrowserHistory","App","setMode","setAlert","message","setTimeout","basename","body","background","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f3e2189.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutTextUtils}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <div className=\"d-flex\">\r\n              <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\" onClick={props.toggleMode} />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\r\n                    {props.mode === 'light' ? `Dark` : `Light`} Mode\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\n/* prop types  */\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutTextUtils: PropTypes.string.isRequired,\r\n};\r\n/* now prop cannot be title = 3 */\r\n\r\n/* default props */\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutTextUtils: 'set about us',\r\n  };","import React, { useState } from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(''); /* inside function */\r\n    /* text = 'update text'; */ //wrong way\r\n    /* setText( ); */\r\n    \r\n    const handleUpClick = () => {\r\n        console.log('uper click button clicked');\r\n        let newText = text.toUpperCase();\r\n        setText(newText); // text+=text;\r\n        props.showAlert('converted to uppercase', 'success');\r\n    }\r\n    \r\n    const handleOnChange = (event) => {\r\n        console.log('textarea on changed', + text);\r\n        setText(event.target.value); // text+=text;\r\n    }\r\n\r\n    const handleCopyBoard = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value); // text+=text;\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert('copied to clipboard', 'success');\r\n    }\r\n    \r\n    const handleExtraSpace = (event) => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('extra space removed', 'success');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`container`}>\r\n                \r\n                <div>\r\n                    <h1>{props.heading}</h1>\r\n                    <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className='form-label'>Example textarea</label>\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}\r\n                        style={\r\n                            {backgroundColor: props.mode === 'dark' ? '#0e0b1e' : 'white', \r\n                            color: props.mode === 'dark' ? 'white' : 'black'}\r\n                        }>\r\n                            </textarea>\r\n                    {/* normal variable will not be updated here as by default react doesnt watch all variables */}\r\n                    {/* listen event onchange event we will get */}\r\n                    </div>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={handleCopyBoard}>Copy to clipboard</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={handleExtraSpace}>Remove extra space</button>\r\n                </div>\r\n                <div className=\"my-3\">\r\n                </div>\r\n                <h1>Your text summary</h1>\r\n                <p>{text.split(\" \").filter( element => element.length !==0 ).length} words and {text.length} characters</p>\r\n                <p>{(text.split(\" \").filter( element => element.length !==0 ).length)*0.08} minutes to read</p>\r\n                <h2>Preview text</h2>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n/* challenge */\r\n/* \r\n1 - clear text\r\n2 - \r\n*/ \r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n\r\n    /* const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n\r\n    const [btnText, setBtnText] = useState('Dark Mode');\r\n\r\n    const handleToggle = () => {\r\n\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid #fff'\r\n            });\r\n            setBtnText('Light Mode');\r\n\r\n        } else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border: '1px solid #000'\r\n            });\r\n            setBtnText('Light Mode');\r\n        }\r\n    } */\r\n\r\n    let myStyle = {\r\n        color: props.mode ==='dark'?'white':'#042743',\r\n        backgroundColor: props.mode ==='dark'?'rgb(36 74 104)':'white', \r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            <strong>Analyze Your text</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                        Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            <strong>Free to use </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong>Browser Compatible </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button onClick={handleToggle} type=\"button\" className=\"btn btn-primary\">{btnText}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\nimport { createBrowserHistory } from \"history\";\nimport {\n  Route,\n  Link,\n  HashRouter,\n  Switch\n} from \"react-router-dom\";\n\n\nconst history = createBrowserHistory();\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  \n  const toggleMode = ()=>{\n   if(mode ==='light'){\n    setMode('dark');\n    document.body.style.background = '#0e0b1e';\n    document.body.style.color = 'white';\n    showAlert('Dark Mode is Enabled', 'success');  \n  } else {\n    setMode('light');  \n    document.body.style.background = 'white'; \n    document.body.style.color = 'black';\n    showAlert('Light Mode is Enabled', 'success');\n   } \n  }\n  \n  return (\n    <>\n      <HashRouter basename='/'>\n\n        <Navbar \n          title='Text Utils' \n          aboutTextUtils='About text utils'\n          mode={mode} \n          toggleMode={toggleMode} /> {/* props are properties */}\n        {/* <Navbar/> */} {/* props are properties */}\n        {/* props are not to be changed and used as read only */}\n\n        <Alert alert={alert} />\n        \n            <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm heading='Enter the text to analyze below' showAlert={showAlert} mode={mode}/>\n            </Route>\n          \n          {/* why to use exact?\n            /users --> Cmp1\n            /users/home --> Cmp2\n          */}\n      </HashRouter>\n\n      \n    </>\n  );\n}\n\nexport default App;\n\n\n/* control application from app.js for eg dark mode light mode */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}